paths:
  /posts:
    post:
      summary: Create a new post
      tags: [Posts]
      security:
        - accessTokenAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                authorId:
                  type: string
                  description: ID of the author creating the post
                content:
                  type: string
                  description: Content of the post
                photo:
                  type: string
                  format: binary
                  description: Image file for the post (optional)
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid input
        '500':
          description: Server error

    get:
      summary: Get all posts
      tags: [Posts]
      security:
        - accessTokenAuth: []
      parameters:
        - in: query
          name: skip
          schema:
            type: integer
            default: 0
            description: Number of posts to skip
        - in: query
          name: limit
          schema:
            type: integer
            default: 5
            description: Number of posts to return
      responses:
        '200':
          description: List of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '500':
          description: Server error

  /posts/{id}:
    get:
      summary: Get a post by ID
      tags: [Posts]
      security:
        - accessTokenAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The post ID
      responses:
        '200':
          description: Post found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
        '500':
          description: Server error

    put:
      summary: Update a post by ID
      tags: [Posts]
      security:
        - accessTokenAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The post ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: Updated content of the post
                photo:
                  type: string
                  format: binary
                  description: Image file for the post (optional)
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '403':
          description: You are not authorized to update this post
        '404':
          description: Post not found
        '500':
          description: Server error

    delete:
      summary: Delete a post by ID
      tags: [Posts]
      security:
        - accessTokenAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The post ID
      responses:
        '200':
          description: Post deleted successfully
        '403':
          description: You are not authorized to delete this post
        '404':
          description: Post not found
        '500':
          description: Server error

  /posts/author/{authorId}:
    get:
      summary: Get posts by author ID
      tags: [Posts]
      security:
        - accessTokenAuth: []
      parameters:
        - in: path
          name: authorId
          required: true
          schema:
            type: string
          description: The author ID
        - in: query
          name: skip
          schema:
            type: integer
            default: 0
          description: Number of posts to skip
        - in: query
          name: limit
          schema:
            type: integer
            default: 5
          description: Number of posts to return
      responses:
        '200':
          description: List of posts by the author
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '404':
          description: Author not found
        '500':
          description: Server error

components:
  schemas:
    Post:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the post
        authorId:
          type: string
          description: ID of the author who created the post
        content:
          type: string
          description: Content of the post
        date:
          type: string
          format: date-time
          description: Date of post creation
        likesCount:
          type: integer
          description: Number of likes on the post
        commentCount:
          type: integer
          description: Number of comments on the post
        photoUrl:
          type: string
          description: URL to the post's photo (optional)
