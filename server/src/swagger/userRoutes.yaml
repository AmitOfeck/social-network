/users/register:
  post:
    summary: Register a new user
    tags: [Users]
    requestBody:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
              name:
                type: string
              image:
                type: string
                format: binary
    responses:
      201:
        description: User created successfully
      400:
        description: Email already exists
      500:
        description: Server error

/users/login:
  post:
    summary: Login a user
    tags: [Users]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
    responses:
      200:
        description: User logged in successfully
      400:
        description: Invalid credentials
      500:
        description: Server error

/users/{userId}:
  get:
    summary: Get user by ID
    tags: [Users]
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          type: string
        description: The user ID
    responses:
      200:
        description: User found
      404:
        description: User not found
      500:
        description: Server error

#   put:
#     summary: Update user by ID
#     tags: [Users]
#     parameters:
#       - in: path
#         name: id
#         required: true
#         schema:
#           type: string
#         description: The user ID
#     requestBody:
#       required: true
#       content:
#         multipart/form-data:
#           schema:
#             type: object
#             properties:
#               name:
#                 type: string
#               image:
#                 type: string
#                 format: binary
#     responses:
#       200:
#         description: User updated successfully
#       404:
#         description: User not found
#       500:
#         description: Failed to update user

# /users/refresh-token/{userId}:
#   post:
#     summary: Refresh user token
#     tags: [Users]
#     parameters:
#       - in: path
#         name: userId
#         required: true
#         schema:
#           type: string
#         description: The user ID
#     responses:
#       200:
#         description: Token refreshed successfully
#       401:
#         description: No refresh token provided
#       500:
#         description: Server error

# /users/google-login:
#   post:
#     summary: Login with Google
#     tags: [Users]
#     requestBody:
#       required: true
#       content:
#         application/json:
#           schema:
#             type: object
#             properties:
#               token:
#                 type: string
#     responses:
#       200:
#         description: User logged in successfully
#       500:
#         description: Server error